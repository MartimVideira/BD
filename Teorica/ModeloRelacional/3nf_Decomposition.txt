3NF Decomposition Algorithm
------------------------------------------

Input: relation R + set F of FDs for R
Output: decomposition of R into 3NF relations with “lossless join” and
“dependency preservation”.

1   .Find a minimal basis for F, say G  
(Minimal Basis: Right sides with only 1 attribute)

    .No redundant FDs
        For each DF ~X->Ã ,compute ~X* USING THE OTHERS DFs. If the set of atributes that our X determines is 
        in the set X* the dependency  ~X->Ã  is redundant so we exclude it         

    .No redundant attributes on the left sides:
        Remove 1 attribute from left side and compute closure of the remaining attributes
        with the original DFs. If closure includes the right side, the attribute can be removed


2.  For each DF ~X->Ã in G create a relation R’(~X,Ã)
    Previously, merge DFs with equal left sides
    
3.  If none of the relations of step 2 is a superkey for R,
    add another relation for a key for R.




Exemple:

R (A, B, C, D, E); AB->C, C->B and A->D

1. Find a minimal basis for DFs
---Right sides with only 1 attribute?----
Every relation has  a single attribute in the right side
--------------------------------------------------------
-----No redundant DFs?------
{A, B}+= {A, B, D} It does not contain C thus the DF is essential

{C}+ = {C}  It does not contain B thus the DF is essential

{A}+ = {A}  It does not contain D thus the DF is essential
--------------------------------------------------------
-----No redundant attributes on left side?--------
On AB-> C, remove A, getting B->C. {B}+={B}. Since it does not contain C, the
attribute A is essential
On AB->C, remove B, getting A->C. {A}+={AD}. Since it does not contain C, the
attribute B is essential 
-----------------------------------------------------------------
2. For each ~X->Ã in G, create a relation R’ (X, A)

R1 (A, B, C)
R2 (C, B)
R3 (A, D)

3. If none of the relations of step 2 is a superkey for R, add
another relation for a key for R
Keys: {A, B, E}, {A, C, E}
R4 should be one of them